{"version":3,"sources":["react-auth0-spa.js","utils/history.js","store/reducer.js","components/UI/CustomBtn/CustomBtn.js","components/Register/Register.js","components/OTP/OTP.js","components/Cards/Card.js","components/Cards/CovidBeds.js","components/Cards/CovidPatients.js","components/Cards/EmptyBeds.js","components/Cards/EmptyVentilators.js","components/UI/SwitchBtn/SwitchBtn.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js","components/Dashboard/Dashboard.module.css","components/Register/Register.module.css","components/OTP/OTP.module.css","components/Cards/Card.module.css","components/UI/SwitchBtn/SwitchBtn.module.css","components/UI/CustomBtn/CustomBtn.module.css"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","createBrowserHistory","initState","id","name","email","coords","govtHospital","ambulance","covidExclusive","data","accepting","emptyBeds","emptyVentilators","covidPatients","covidBeds","lastUpdated","reducer","state","actions","d","Date","hr","getHours","min","getMinutes","timeLabel","updateTime","type","valType","toggleLabel","toggleResult","store","CustomBtn","props","btnColor","backgroundColor","bgColor","className","styles","btn","style","onClick","click","btnText","webAuth","auth0","WebAuth","clientID","domain","redirectUri","responseType","audience","RegistrationSchema","yup","required","withRouter","useSelector","dispatch","useDispatch","initValues","Register","join","initialValues","validationSchema","onSubmit","values","navigator","geolocation","getCurrentPosition","pos","newState","latitude","longitude","passwordlessStart","connection","send","err","res","log","localStorage","setItem","JSON","stringify","push","handleSubmit","formContainer","formHeader","formInputContainer","placeholder","autoComplete","onChange","handleChange","checkboxContainer","checkboxInputs","checkboxLabel","switch","checked","slider","round","submitForm","OTPSchema","code","length","passwordlessLogin","verificationCode","removeItem","Card","update","setUpdate","handleClick","axios","patch","getItem","cardTitleContainer","cardTitle","cardValue","e","changeVal","target","readOnly","CovidBeds","setCovidBeds","val","parseInt","CovidPatients","setCovidPatients","EmptyBeds","beds","setBeds","EmptyVentilators","ventilators","setVentilators","SwitchBtn","label","setLabel","hash","parse","parseHash","authResult","idTokenPayload","sub","split","method","url","headers","accessToken","setAccepting","handleToggle","Dashboard","header","headerText","width","footer","footerText","App","path","component","OTP","exact","Boolean","hostname","match","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","config","client_id","clientId","redirect_uri","origin","targetUrl","getElementById","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.92e5aa0f.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","const initState = {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    coords: \"\",\n    govtHospital: false,\n    ambulance: false,\n    covidExclusive: false,\n    data: {\n        accepting: true,\n        emptyBeds: 0,\n        emptyVentilators: 0,\n        covidPatients: 0,\n        covidBeds: 0,\n        lastUpdated: \"Now\",\n    }\n}\n\nconst reducer = (state = initState, actions) => {\n    const d = new Date();\n    let hr = d.getHours() <= 9 ? `0${d.getHours()}` : d.getHours();\n    let min = d.getMinutes() <= 9 ? `0${d.getMinutes()}` : d.getMinutes();\n    let timeLabel = d.getHours() < 12 ? \"AM\" : \"PM\";\n    let updateTime = `at ${hr}:${min}${timeLabel}`;\n    // let updateTime = `at ${hr}:${min}${timeLabel}, ${d.getDate()}/${d.getMonth()+1}/${d.getFullYear()}`;\n\n    switch(actions.type) {\n        case 'UPDATE_VALUE':\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    [actions.valType]: actions.value,\n                    lastUpdated: updateTime\n                }\n            }\n        \n        case 'TOGGLE_STATUS':\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    [actions.toggleLabel]: actions.toggleResult,\n                    lastUpdated: updateTime\n                },\n            }\n        \n        case 'TEMP_STORE':\n            return {\n                ...actions.store,\n                lastUpdated: updateTime\n            }\n\n        case 'INIT_DASHBOARD':\n            return {\n                ...actions.store,\n                id: actions.id,\n                lastUpdated: updateTime\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\n\nimport styles from './CustomBtn.module.css';\n\nconst CustomBtn = (props) => {\n    const btnColor = {\n        backgroundColor: props.bgColor,\n    }\n\n    return (\n        <button className={styles.btn} style={btnColor} onClick={props.click} type='button'>\n            <span className={styles.btnText}>{props.title}</span>\n        </button>\n    )\n}\n\nexport default CustomBtn;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport CustomBtn from '../UI/CustomBtn/CustomBtn'\nimport { withRouter } from 'react-router-dom';\nimport auth0 from 'auth0-js';\n\n\nimport styles from './Register.module.css'\nimport axios from 'axios';\n\nconst webAuth = new auth0.WebAuth({\n    clientID: 'X6vuD8AiLJrjU2r2M5gomQARWvZKdycL',\n    domain: 'alt-force.us.auth0.com',\n    redirectUri: 'http://localhost:3000',\n    responseType: 'token id_token',\n    audience: 'https://alt-force/api'\n});\n\nconst RegistrationSchema = yup.object({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    govtHospital: yup.bool().required(),\n    covidExclusive: yup.bool().required(),\n    ambulance: yup.bool().required(),\n})\n\nconst Register = (props) => {\n    document.title = \"Register | Alt-Force COVID-19\";\n    const store = useSelector(state => state);\n    const dispatch = useDispatch();\n    const initValues = {\n        name: store.name,\n        email: store.email,\n        govtHospital: store.govtHospital,\n        ambulance: store.ambulance,\n        covidExclusive: store.covidExclusive,\n    }\n\n    return (\n        <div className={[\"d-flex flex-column align-items-center text-center\", styles.Register].join(' ')}>\n            <Formik\n                initialValues={initValues}\n                validationSchema={RegistrationSchema}\n                onSubmit={ async (values, actions) => {\n                    navigator.geolocation.getCurrentPosition((pos) => {\n                        let newState = {\n                            ...store,\n                            name: values.name,\n                            email: values.email,\n                            govtHospital: values.govtHospital,\n                            ambulance: values.ambulance,\n                            covidExclusive: values.covidExclusive,\n                            coords: [pos.coords.latitude, pos.coords.longitude]\n                        }\n                        dispatch({ type: 'TEMP_STORE', store: newState });\n\n                        webAuth.passwordlessStart({\n                            connection: 'email',\n                            send: 'code',\n                            email: values.email\n                        }, (err, res) => {\n                            if (err) {\n                                console.log(err);\n                            } else {\n                                console.log(res);\n                                localStorage.setItem('altForce_hospital', JSON.stringify(newState));\n                                props.history.push(\"/verify\");\n                            }\n                        });\n                    })\n                }}\n            >\n                {(props) => (\n                    <form onSubmit={props.handleSubmit} className={styles.formContainer}>\n                        <div className={styles.formHeader}>\n                            <p>Alt-Force COVID-19 EasyHospital Dashboard</p>\n                            <p>Register</p>\n                        </div>\n                        <div className={styles.formInputContainer}>\n                            <label>Name: </label>\n                            <input\n                                name=\"name\"\n                                type=\"text\"\n                                placeholder=\"Hospital Name\"\n                                autoComplete=\"off\"\n                                onChange={props.handleChange('name')}\n                                value={props.values.name}\n                            />\n                        </div>\n\n                        <div className={styles.formInputContainer}>\n                            <label>Email: </label>\n                            <input\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email ID\"\n                                autoComplete=\"off\"\n                                onChange={props.handleChange('email')}\n                                value={props.values.email}\n                            />\n                        </div>\n\n                        <div className={styles.checkboxContainer}>\n                            <div className={styles.checkboxInputs}>\n                                <label className={styles.checkboxLabel}>Government Hospital?</label>\n                                <label className={styles.switch}>\n                                    <input\n                                        name=\"govtHospital\"\n                                        type=\"checkbox\"\n                                        checked={props.values.govtHospital}\n                                        onChange={props.handleChange('govtHospital')}\n                                        value={props.values.govtHospital}\n                                    />\n                                    <span className={[styles.slider, styles.round].join(' ')}></span>\n                                </label>\n                            </div>\n\n                            <div className={styles.checkboxInputs}>\n                                <label className={styles.checkboxLabel}>COVID-19 Exclusive?</label>\n                                <label className={styles.switch}>\n                                    <input\n                                        name=\"covidExclusive\"\n                                        type=\"checkbox\"\n                                        checked={props.values.covidExclusive}\n                                        onChange={props.handleChange('covidExclusive')}\n                                        value={props.values.covidExclusive}\n                                    />\n                                    <span className={[styles.slider, styles.round].join(' ')}></span>\n                                </label>\n                            </div>\n\n                            <div className={styles.checkboxInputs}>\n                                <label className={styles.checkboxLabel}>Ambulance Facility?</label>\n                                <label className={styles.switch}>\n                                    <input\n                                        name=\"ambulance\"\n                                        type=\"checkbox\"\n                                        checked={props.values.ambulance}\n                                        onChange={props.handleChange('ambulance')}\n                                        value={props.values.ambulance}\n                                    />\n                                    <span className={[styles.slider, styles.round].join(' ')}></span>\n                                </label>\n                            </div>\n                        </div>\n                        <CustomBtn title=\"NEXT\" bgColor=\"#25CEDE\" click={props.submitForm} />\n                    </form>\n                )}\n\n            </Formik>\n\n        </div>\n    )\n}\n\nexport default withRouter(Register);","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport CustomBtn from '../UI/CustomBtn/CustomBtn'\nimport { withRouter } from 'react-router-dom';\nimport auth0 from 'auth0-js';\n\n\nimport styles from './OTP.module.css'\n\nconst webAuth = new auth0.WebAuth({\n    clientID: 'X6vuD8AiLJrjU2r2M5gomQARWvZKdycL',\n    domain: 'alt-force.us.auth0.com',\n    redirectUri: 'http://localhost:3000',\n    responseType: 'token id_token',\n    audience: 'https://alt-force/api'\n});\n\nconst OTPSchema = yup.object({\n    code: yup.string().required().length(6)\n})\n\nconst OTP = (props) => {\n    document.title = \"Verify | Alt-Force COVID-19\";\n    const store = useSelector(state => state)\n    const dispatch = useDispatch();\n\n    if(store.email.length == 0) {\n        props.history.push(\"/\")\n    }\n\n    return (\n        <div className={[\"d-flex flex-column align-items-center text-center\", styles.Register].join(' ')}>\n            <Formik\n                initialValues={{ code: \"\" }}\n                validationSchema={OTPSchema}\n                onSubmit={ (values, actions) => {\n                    webAuth.passwordlessLogin({\n                        connection: 'email',\n                        email: store.email,\n                        verificationCode: `${values.code}`\n                    }, (err, res) => {\n                        if(err) {\n                            console.log(err);\n                            localStorage.removeItem('hospital');\n                            props.history.push('/register');\n                        } else {\n                            console.log(res);\n                        }\n                    });\n                }}\n            >\n                {(props) => (\n                    <form onSubmit={props.handleSubmit} className={styles.formContainer}>\n                        <div className={styles.formHeader}>\n                            <p>Alt-Force COVID-19 Dashboard</p>\n                            <p>Verification</p>\n                        </div>\n                        <div className={styles.formInputContainer}>\n                            <label>OTP: </label>\n                            <input\n                                name=\"otp\"\n                                type=\"number\"\n                                placeholder=\"XXXXXX\"\n                                autoComplete=\"off\"\n                                onChange={props.handleChange('code')}\n                                value={props.values.code}\n                            />\n                        </div>\n                        <CustomBtn title=\"VERIFY\" bgColor=\"#25CEDE\" click={props.submitForm} />\n                    </form>\n                )}\n\n            </Formik>\n\n        </div>\n    )\n}\n\nexport default withRouter(OTP);","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport CustomBtn from '../UI/CustomBtn/CustomBtn';\n\nimport styles from './Card.module.css';\nimport axios from 'axios';\n\nconst Card = (props) => {\n    const store = useSelector(state => state);\n    const dispatch = useDispatch();\n    const [update, setUpdate] = useState(false);\n\n    const handleClick = async () => {\n        if(update == true) {\n            dispatch({ type: 'UPDATE_VALUE', valType: props.valType, value: props.value });\n            \n            let res = await axios.patch(`http://alt-force-hack-jaipur.herokuapp.com/api/hospital/${localStorage.getItem('altForce_hId')}/?format=json`, {\n                \"empty_beds\": store.data.emptyBeds,\n                \"empty_ventilators\": store.data.emptyVentilators,\n                \"covid_patients\": store.data.covidPatients,\n                \"empty_covid_beds\": store.data.covidBeds,\n                \"last_updated\": store.data.lastUpdated\n            })\n        }\n        setUpdate(!update);\n    }\n\n    return (\n        <div className={styles.Card}>\n            <div className={styles.cardTitleContainer}>\n                <p className={styles.cardTitle}>{props.title}</p>\n            </div>\n            <div className={styles.cardValue}>\n                <input \n                    type=\"text\" \n                    name=\"cardValue\" \n                    value={props.value} \n                    onChange={(e) => props.changeVal(e.target.value)} \n                    readOnly={!update} />\n            </div>\n            {\n                update ? \n                <CustomBtn title=\"CONFIRM\" bgColor=\"#FA6E64\" click={handleClick}/> :\n                <CustomBtn title=\"UPDATE\" bgColor=\"#25CEDE\" click={handleClick}/>\n            }\n        </div>\n    )\n}\n\nexport default Card;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from './Card';\n\nconst CovidBeds = (props) => {\n    const store = useSelector(state => state);\n    const [covidBeds, setCovidBeds] = useState( store.data.covidBeds );\n\n    const handleChange = (val) => {\n        if(val == \"\") {\n            setCovidBeds(0);\n        } else {\n            setCovidBeds(parseInt(val))\n        }\n    }\n\n    return (\n        <Card \n            title=\"Beds for COVID-19 Patients\" \n            valType=\"covidBeds\"\n            value={covidBeds} \n            changeVal={(val) => handleChange(val)} \n        />\n    )\n}\n\nexport default CovidBeds;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from './Card';\n\nconst CovidPatients = (props) => {\n    const store = useSelector(state => state);\n    const [covidPatients, setCovidPatients] = useState( store.data.covidPatients );\n\n    const handleChange = (val) => {\n        if(val == \"\") {\n            setCovidPatients(0);\n        } else {\n            setCovidPatients(parseInt(val))\n        }\n    }\n\n    return (\n        <Card \n            title=\"COVID-19 Patients\" \n            valType=\"covidPatients\"\n            value={covidPatients} \n            changeVal={(val) => handleChange(val)} \n        />\n    )\n}\n\nexport default CovidPatients;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from './Card';\n\nconst EmptyBeds = (props) => {\n    const store = useSelector(state => state);\n    const [beds, setBeds] = useState( store.data.emptyBeds );\n\n    const handleChange = (val) => {\n        if(val == \"\") {\n            setBeds(0);\n        } else {\n            setBeds(parseInt(val))\n        }\n    }\n    \n    return (\n        <Card \n            title=\"Empty Beds\" \n            valType=\"emptyBeds\"\n            value={beds} \n            changeVal={(val) => handleChange(val)}\n        />\n    )\n}\n\nexport default EmptyBeds;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from './Card';\n\nconst EmptyVentilators = (props) => {\n    const store = useSelector(state => state);\n    const [ventilators, setVentilators] = useState( store.data.emptyVentilators );\n\n    const handleChange = (val) => {\n        if(val == \"\") {\n            setVentilators(0);\n        } else {\n            setVentilators(parseInt(val))\n        }\n    }\n\n    return (\n        <Card \n            title=\"Empty Ventilators\" \n            valType=\"emptyVentilators\"\n            value={ventilators} \n            changeVal={(val) => handleChange(val)}\n        />\n    )\n}\n\nexport default EmptyVentilators;","import React, { useState } from 'react';\n\nimport styles from './SwitchBtn.module.css'\n\nconst SwitchBtn = (props) => {\n    return (\n        <label className={styles.switch}>\n            <input \n                name=\"switchBtn\"\n                type=\"checkbox\" \n                checked={props.label}\n                value={props.label}\n                onChange={props.setLabel}\n            />\n            <span className={[styles.slider, styles.round].join(' ')}></span>\n        </label>\n    )\n}\n\nexport default SwitchBtn;","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CovidBeds, CovidPatients, EmptyBeds, EmptyVentilators } from '../Cards/Cards';\nimport SwitchBtn from '../UI/SwitchBtn/SwitchBtn';\nimport { withRouter } from 'react-router-dom';\nimport auth0 from 'auth0-js';\nimport { useAuth0 } from '../../react-auth0-spa';\nimport axios from 'axios';\n\nimport styles from './Dashboard.module.css';\n\nconst Dashboard = (props) => {\n    document.title = \"Dashboard | Alt-Force COVID-19\";\n    const webAuth = new auth0.WebAuth({\n        clientID: 'X6vuD8AiLJrjU2r2M5gomQARWvZKdycL',\n        domain: 'alt-force.us.auth0.com',\n        redirectUri: 'http://localhost:3000',\n        responseType: 'token id_token',\n        audience: 'https://alt-force/api'\n    });\n    const dispatch = useDispatch();\n\n    if(!window.location.hash) {\n        props.history.push('/register');\n    } else {\n        let state = JSON.parse(localStorage.getItem('altForce_hospital'));\n        webAuth.parseHash({ hash: window.location.hash }, async (err, authResult) => {\n            if(err) {\n                return console.log(err);\n            } else if(authResult) {\n                localStorage.setItem('altForce_hId', authResult.idTokenPayload.sub.split('|')[1]);\n                dispatch({ type: 'INIT_DASHBOARD', store: JSON.parse(localStorage.getItem('altForce_hospital')), id: localStorage.getItem('altForce_hId')  });\n                try {\n                    let res = await axios({\n                        method: 'post',\n                        url: 'http://alt-force-hack-jaipur.herokuapp.com/api/hospital/?format=json',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': authResult.accessToken\n                        },\n                        data: {\n                            \"id\": authResult.idTokenPayload.sub.split('|')[1],\n                            \"hospital_name\": state.name,\n                            \"email\": state.email,\n                            \"latitude\": state.coords[0],\n                            \"longitude\": state.coords[1],\n                            \"government_hospital\": state.govtHospital,\n                            \"ambulance_facility\": state.ambulance,\n                            \"covid_exclusive\": state.covidExclusive,\n                            \"accepting_covid_patients\": state.data.accepting,\n                            \"empty_beds\": state.data.emptyBeds,\n                            \"empty_ventilators\": state.data.emptyVentilators,\n                            \"covid_patients\": state.data.covidPatients,\n                            \"empty_covid_beds\": state.data.covidBeds,\n                            \"last_updated\": state.data.lastUpdated\n                        }\n                    })\n                } catch (err) {\n                    console.log(err);\n                }\n\n                return console.log(authResult);\n            }\n        });\n    }\n    const store = useSelector(state => state);\n\n\n    const [accepting, setAccepting] = useState( store.data.accepting );\n    console.log(store);\n\n    const handleToggle = async () => {\n        dispatch({ type: 'TOGGLE_STATUS', toggleLabel: \"accepting\", toggleResult: !accepting });\n        let res = await axios.patch(`http://alt-force-hack-jaipur.herokuapp.com/api/hospital/${localStorage.getItem('altForce_hId')}/?format=json`, {\n                \"accepting_covid_patients\": store.data.accepting\n            })\n        setAccepting(!accepting);\n    }\n\n    return (\n        <div className={[\"d-flex flex-column align-items-center text-center\", styles.Dashboard].join(' ')}>\n            <div className={[\"row w-100 px-5 py-4\", styles.header].join(' ')}>\n                <div className={[\"col-6 text-left\", styles.headerText].join(' ')}>EasyHospital</div>\n                <div className={[\"col-6 text-right\", styles.headerText].join(' ')}>\n                    { store.name }\n                </div>\n            </div>\n            <div className=\"my-3 d-flex flex-row flex-wrap text-center justify-content-around align-items-center\" style={{ width: '90%' }}>\n                <EmptyBeds />\n                <EmptyVentilators />\n                <CovidPatients />\n                <CovidBeds />\n            </div>\n             <div className={[\"row w-100 px-5 py-4\", styles.footer].join(' ')}>\n                 <div className={[\"col-5 text-left ml-1\", styles.footerText].join(' ')}>\n                     Accepting COVID-19 Patients?\n                    <SwitchBtn label={accepting} setLabel={handleToggle}/>\n                 </div>\n                 <div className={[\"col-5 offset-1 text-right mr-1\", styles.footerText].join(' ')}>\n                    Last Updated {store.data.lastUpdated}\n                </div>\n             </div>\n        </div>\n    )\n}\n\nexport default withRouter(Dashboard);","import React from 'react';\nimport './App.css';\nimport Register from './components/Register/Register';\nimport OTP from './components/OTP/OTP';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route path=\"/register\" component={Register} />\n                <Route path=\"/verify\" component={OTP} />\n                <Route path=\"/\" component={Dashboard} exact/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\nimport reducer from './store/reducer';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    audience={config.audience}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </Auth0Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dashboard\":\"Dashboard_Dashboard__jFBog\",\"header\":\"Dashboard_header__vkBFB\",\"footer\":\"Dashboard_footer__3efHK\",\"headerText\":\"Dashboard_headerText__1f46T\",\"footerText\":\"Dashboard_footerText__2Sh3y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"Register_Register__28yeG\",\"formContainer\":\"Register_formContainer__1C5mK\",\"formHeader\":\"Register_formHeader__2J_JR\",\"formInputContainer\":\"Register_formInputContainer__22BFl\",\"checkboxContainer\":\"Register_checkboxContainer__1__ay\",\"checkboxInputs\":\"Register_checkboxInputs__ZuyUX\",\"checkboxLabel\":\"Register_checkboxLabel__1wyfu\",\"switch\":\"Register_switch__3AlWj\",\"slider\":\"Register_slider__3YeKA\",\"round\":\"Register_round__2dh08\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"OTP_Register__2NkkQ\",\"formContainer\":\"OTP_formContainer__3dBir\",\"formHeader\":\"OTP_formHeader__2qKre\",\"formInputContainer\":\"OTP_formInputContainer__10q9h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__XAwWu\",\"cardTitleContainer\":\"Card_cardTitleContainer__3JonN\",\"cardTitle\":\"Card_cardTitle___3SCX\",\"cardValue\":\"Card_cardValue__3GZxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"SwitchBtn_switch__3-a4S\",\"slider\":\"SwitchBtn_slider__z0Hph\",\"round\":\"SwitchBtn_round__1bvO9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CustomBtn_btn__3qyx9\",\"btnText\":\"CustomBtn_btnText__1XeL7\"};"],"sourceRoot":""}